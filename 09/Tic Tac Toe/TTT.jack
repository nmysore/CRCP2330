
/** Implements a tic tac toe gameboard. */
class TTT {

   field int x, y; // screen location of the square's top-left corner
   field int size; // length of this square, in pixels

   /** Constructs a new square with a given location and size. */
   constructor TTT new() {
      do draw();
      do getKbdData();
      return this;
   }

   /** Disposes the TTT gameboard. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Draws the square on the screen. */
   method void draw() {
      do Screen.setColor(true);
   
   //Draws 3x3 game board 
      do Screen.drawLine(135,85,362,85);
      do Screen.drawLine(210,25,210,210);
      do Screen.drawLine(135,150,362,150);
      do Screen.drawLine(290,25,290,210);

   
   //Initializes cell numbers 
      do Output.moveCursor(5, 21);
      do Output.printInt(1);
      do Output.moveCursor(5, 31);
      do Output.printInt(2);
      do Output.moveCursor(5, 41);
      do Output.printInt(3);

      do Output.moveCursor(10, 21);
      do Output.printInt(4);
      do Output.moveCursor(10, 31);
      do Output.printInt(5);
      do Output.moveCursor(10, 41);
      do Output.printInt(6);
      

      do Output.moveCursor(16, 21);
      do Output.printInt(7);
      do Output.moveCursor(16, 31);
      do Output.printInt(8);
      do Output.moveCursor(16, 41);
      do Output.printInt(9);
      
      
      return;
   }

   method void getKbdData(){

    var int x;
     do Output.moveCursor(2, 45); 
     let x= Keyboard.readInt("Press a Key 1-9");

     if(x=1){
       do Output.moveCursor(5, 21);
      do Output.printString("X");
      }
     return;
   } 
    
   /** Erases the square from the screen. */
   method void erase() {
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }

    /** Increments the square size by 2 pixels. */
   method void incSize() {
      if (((y + size) < 254) & ((x + size) < 510)) {
         do erase();
         let size = size + 2;
         do draw();
      }
      return;
   }

   /** Decrements the square size by 2 pixels. */
   method void decSize() {
      if (size > 2) {
         do erase();
         let size = size - 2;
         do draw();
      }
      return;
   }

   /** Moves the square up by 2 pixels. */
   method void moveUp() {
      if (y > 1) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
         let y = y - 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, y, x + size, y + 1);
      }
      return;
   }

   /** Moves the square down by 2 pixels. */
   method void moveDown() {
      if ((y + size) < 254) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + size, y + 1);
         let y = y + 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
      }
      return;
   }

   /** Moves the square left by 2 pixels. */
   method void moveLeft() {
      if (x > 1) {
         do Screen.setColor(false);
         do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
         let x = x - 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, y, x + 1, y + size);
      }
      return;
   }

   /** Moves the square right by 2 pixels. */
   method void moveRight() {
      if ((x + size) < 510) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + 1, y + size);
         let x = x + 2;
         do Screen.setColor(true);
         do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
      }
      return;
   }
}
